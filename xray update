def JiraApiCallPost(apiUrl, executed_by, started, finished):

payload = {
    "status": Result,
    "executedBy": executed_by,
    "startedOn": started,
    "finishedOn": finished
}
headers = {"Content-Type": "application/json"}
resp = session.put(apiUrl, json=payload, auth=_auth, allow_redirects=True, verify=verify)

def get_test_execution_data(JiraID, Result):
    response_post = ""
    executed_by = "your_username"  # Replace with the appropriate value
    started = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%f%z")
    finished = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%f%z")

    # ... (rest of the code)

    if len(restestid) > 0:
        restestid = restestid[-1]["id"]
        update_url = "http://jiramswm.ms.com/jira/rest/raven/1.0/api/testrun/{0}/status".format(str(restestid))
        response_post = JiraApiCallPost(update_url, executed_by, started, finished)
    else:
        pass

    # ... (rest of the code)
    
    def get_test_execution_data(JiraID, Result):
    response_post = ""
    executed_by = "your_username"  # Replace with the appropriate value
    started = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%f%z")
    finished = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%f%z")

    # ... (rest of the code)

    if len(restestid) > 0:
        restestid = restestid[-1]["id"]
        update_url = "http://jiramswm.ms.com/jira/rest/raven/1.0/api/testrun/{0}/status".format(str(restestid))
        response_post = JiraApiCallPost(update_url, executed_by, started, finished)
    else:
        pass

    # ... (rest of the code)
    
    def get_test_execution_data(JiraID, Result):
    response_post = ""
    executed_by = "your_username"  # Replace with the appropriate value
    started = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%f%z")
    finished = datetime.now().strftime("%Y-%m-%dT%H:%M:%S.%f%z")

    # ... (rest of the code)

    if len(restestid) > 0:
        restestid = restestid[-1]["id"]
        current_status = restestid[-1]["status"]["name"]
        update_url = "http://jiramswm.ms.com/jira/rest/raven/1.0/api/testrun/{0}".format(str(restestid))

        if current_status != Result:
            response_post = JiraApiCallPost(update_url, Result, executed_by, started, finished)
        else:
            response_post = JiraApiCallPost(update_url, current_status, executed_by, started, finished)
    else:
        pass

    # ... (rest of the code)
    
    
    import requests
import json

# Specify the API endpoint URL
url = 'http://jiramsum.ms.com/jira/rest/raven/1.0/api/test/TEST_ID/testruns'

# Specify the field values you want to update
payload = {
    "field1": "new value",
    "field2": 12345
}

# Convert the payload to JSON format
json_payload = json.dumps(payload)



import requests

def update_xray_test_run(test_run_id, status, executed_by, jira_url, username, api_token):
    url = f"{jira_url}/rest/raven/2.0/api/testrun/{test_run_id}"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Basic {requests.auth._basic_auth_str(username, api_token)}"
    }
    data = {
        "status": status,
        "executedBy": executed_by
    }
    
    response = requests.put(url, json=data, headers=headers)
    
    if response.status_code == 200:
        print("Test Run updated successfully.")
    else:
        print(f"Failed to update Test Run. Status code: {response.status_code}")
        print(response.text)

# Replace these variables with your own values
jira_url = "https://your-jira-instance-url"
username = "your-username"
api_token = "your-api-token"
test_run_id = "your-test-run-id"
status = "PASS"
executed_by = "your-executed-by-username"

update_xray_test_run(test_run_id, status, executed_by, jira_url, username, api_token)


# Send the PUT request
response = requests.put(url, data=json_payload, headers={'Content-Type': 'application/json'})

# Check the response status code
if response.status_code == 200:
    print('Field(s) updated successfully.')
else:
    print('Error occurred. Response:', response.text)



